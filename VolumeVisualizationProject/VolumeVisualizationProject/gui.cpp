// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "gui.h"
#include<Windows.h>
#include<iostream>
#include<gl/GL.h>
#include<gl/GLU.h>


void Gui::cb_exitButton_i(Fl_Menu_*, void*) {
  exit(1);
}
void Gui::cb_exitButton(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_exitButton_i(o,v);
}
//
void Gui::cb_readVol_i(Fl_Menu_*, void*) {
	app->ReadVolume();
}
void Gui::cb_readVol(Fl_Menu_* o, void* v) {
    ((Gui*)(o->parent()->user_data()))->cb_readVol_i(o, v);
}

void Gui::cb_xray_i(Fl_Menu_*, void*) {
	app->CreateXRayProjection();
}
void Gui::cb_xray(Fl_Menu_* o, void* v) {
	((Gui*)(o->parent()->user_data()))->cb_xray_i(o, v);
}
void Gui::cb_mip_i(Fl_Menu_*, void*) {
	app->GenerateMipImage();
}
void Gui::cb_mip(Fl_Menu_* o, void* v) {
	((Gui*)(o->parent()->user_data()))->cb_mip_i(o, v);
}



Fl_Menu_Item Gui::menu_menuBar[] = {
 {"Volume-Rendering", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read Volume File", 0,  (Fl_Callback*)Gui::cb_readVol, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"X-Ray", 0,  (Fl_Callback*)Gui::cb_xray, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"MIP", 0,  (Fl_Callback*)Gui::cb_mip, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
{"Exit", 0,  (Fl_Callback*)Gui::cb_exitButton, 0, 0, FL_NORMAL_LABEL, 0, 14, 1},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* Gui::fileMenu = Gui::menu_menuBar + 0;
Fl_Menu_Item* Gui::exitButton = Gui::menu_menuBar + 4;
Fl_Menu_Item* Gui::volumeMenu = Gui::menu_menuBar + 5;
Fl_Menu_Item* Gui::readVol = Gui::menu_menuBar + 6;
Fl_Menu_Item* Gui::xray= Gui::menu_menuBar + 7;
Fl_Menu_Item* Gui::mip= Gui::menu_menuBar + 9;


Gui::Gui() {
  { MainWindow = new Fl_Double_Window(985, 555, "Scientific Visualization Projects");
    MainWindow->user_data((void*)(this));
    { menuBar = new Fl_Menu_Bar(0, 0, 985, 25, "menuBar");
      menuBar->menu(menu_menuBar);
  
    } // Fl_Menu_Bar* menuBar
    { EditorWindow = new CEditorWindow(15, 25, 385, 350, "EditorWindow");
      EditorWindow->box(FL_NO_BOX);
      EditorWindow->color(FL_BACKGROUND_COLOR);
      EditorWindow->selection_color(FL_BACKGROUND_COLOR);
      EditorWindow->labeltype(FL_NORMAL_LABEL);
      EditorWindow->labelfont(0);
      EditorWindow->labelsize(14);
      EditorWindow->labelcolor(FL_FOREGROUND_COLOR);
      EditorWindow->align(FL_ALIGN_CENTER);
      EditorWindow->when(FL_WHEN_RELEASE);
    } // CEditorWindow* EditorWindow
    { DisplayWindow = new CDisplayWindow(415, 25, 570, 530, "DisplayWindow");
      DisplayWindow->box(FL_NO_BOX);
      DisplayWindow->color(FL_BACKGROUND_COLOR);
      DisplayWindow->selection_color(FL_BACKGROUND_COLOR);
      DisplayWindow->labeltype(FL_NORMAL_LABEL);
      DisplayWindow->labelfont(0);
      DisplayWindow->labelsize(14);
      DisplayWindow->labelcolor(FL_FOREGROUND_COLOR);
      DisplayWindow->align(FL_ALIGN_CENTER);
      DisplayWindow->when(FL_WHEN_RELEASE);
    } // CDisplayWindow* DisplayWindow
    MainWindow->end();
  } // Fl_Double_Window* MainWindow
  app=new Application();
}

void Gui::show() {
  MainWindow->show();
EditorWindow->show();
DisplayWindow->show();
}

